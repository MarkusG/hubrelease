notes:
curl to get github token:
curl --request POST \
  --url https://api.github.com/authorizations \
  -u "USERNAME" \
  --header 'Content-Type: application/json' \
  --header 'X-GitHub-OTP: OTP' \
  --data '{"scopes": ["public_repo"], "note": "test"}'

example response:
{
  "id": 000000000,
  "url": "https://api.github.com/authorizations/000000000",
  "app": {
    "name": "test",
    "url": "https://developer.github.com/v3/oauth_authorizations/",
    "client_id": "00000000000000000000"
  },
  "token": "ffffffffffffffffffffffffffffffffffffffff",
  "hashed_token": "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
  "token_last_eight": "ffffffff",
  "note": "test",
  "note_url": null,
  "created_at": "2019-10-31T23:14:04Z",
  "updated_at": "2019-10-31T23:14:04Z",
  "scopes": [
    "public_repo"
  ],
  "fingerprint": null
}

example error:
{
  "message": "Validation Failed",
  "errors": [
    {
      "resource": "OauthAccess",
      "code": "already_exists",
      "field": "note"
    }
  ],
  "documentation_url": "https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization"
}

release POST response:
{
    "url": "https://api.github.com/repos/MarkusGordathian/dummy/releases/21171200",
    "assets_url": "https://api.github.com/repos/MarkusGordathian/dummy/releases/21171200/assets",
    "upload_url": "https://uploads.github.com/repos/MarkusGordathian/dummy/releases/21171200/assets{?name,label}",
    "html_url": "https://github.com/MarkusGordathian/dummy/releases/tag/0.1.0",
    "id": 21171200,
    "node_id": "MDc6UmVsZWFzZTIxMTcxMjAw",
    "tag_name": "0.1.0",
    "target_commitish": "master",
    "name": "0.1.0",
    "draft": false,
    "author": {
        "login": "MarkusGordathian",
        "id": 10702518,
        "node_id": "MDQ6VXNlcjEwNzAyNTE4",
        "avatar_url": "https://avatars0.githubusercontent.com/u/10702518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarkusGordathian",
        "html_url": "https://github.com/MarkusGordathian",
        "followers_url": "https://api.github.com/users/MarkusGordathian/followers",
        "following_url": "https://api.github.com/users/MarkusGordathian/following{/other_user}",
        "gists_url": "https://api.github.com/users/MarkusGordathian/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/MarkusGordathian/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/MarkusGordathian/subscriptions",
        "organizations_url": "https://api.github.com/users/MarkusGordathian/orgs",
        "repos_url": "https://api.github.com/users/MarkusGordathian/repos",
        "events_url": "https://api.github.com/users/MarkusGordathian/events{/privacy}",
        "received_events_url": "https://api.github.com/users/MarkusGordathian/received_events",
        "type": "User",
        "site_admin": false
    },
    "prerelease": false,
    "created_at": "2019-11-02T01:41:35Z",
    "published_at": "2019-11-03T04:57:00Z",
    "assets": [],
    "tarball_url": "https://api.github.com/repos/MarkusGordathian/dummy/tarball/0.1.0",
    "zipball_url": "https://api.github.com/repos/MarkusGordathian/dummy/zipball/0.1.0",
    "body": "Tag here.\n"
}

options:
--draft: do not prompt user for release message and use tag contents
--prerelease: mark release as prerelease
--remote ORIGIN: specify origin

functionality:
* read tags														DONE
* read remotes to form GitHub URL								DONE
* create GitHub releases										TODO
 * leave packaging to the user
  * multiple files
 * upload package
 * exec $EDITOR to write release title/body						DONE
 * mimic git-commit with first line as title and rest as body?
 * option to write release in terminal or not
  * if not, POST draft release w/ file and return URL

organization:
main.c: main program logic
open repository
get remotes
if !(tryparse remote to GitHub URL)
	ask user
get tag at HEAD
if !tag
	create tag
push tags
if write_in_terminal
	open editor to write release title/body to temp file
else
	write release draft and print URL to stdout
get prerelease from argv
post release
upload assets

git.c/.h: reimpl of git commands
 * char *git_tag_at(char *commit)
  * make this return a string or a git_tag? would mean including git2 in main
 * git_push_tags()
 * char **git_get_remotes()

github.c/.h: functions for posting releases and uploading files
 * post_release(char *payload)
 * upload_asset(char *path)
  * autodetect media type and name

common.c/.h: helper functions/structs
 * struct post_release_payload
 * char *post_release_payload_tostr(struct post_release_payload *payload)
